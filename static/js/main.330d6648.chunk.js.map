{"version":3,"sources":["components/landingPage/style.js","components/Header/index.js","components/TimePicker/index.js","utils.js","components/UserCard/index.js","components/landingPage/index.js","App.js","serviceWorker.js","index.js"],"names":["styles","cardContainer","margin","useStyles","makeStyles","theme","root","flexGrow","ButtonAppBar","classes","className","AppBar","position","Toolbar","Typography","variant","component","TimePicker","props","React","useState","Date","selectedDate","setSelectedDate","utils","DateFnsUtils","Grid","container","justify","id","label","format","value","onChange","date","KeyboardButtonProps","spiltEmptySpace","splitable","split","joinWithEmptyAndTrim","joinable","join","trim","lastElmIndex","arr","length","getDateTimeObj","dateTimeString","temp","slice","time","marginTop","marginLeft","marginRight","title","fontSize","paper","width","height","backgroundColor","palette","background","padding","spacing","border","overflow","activityTitle","marginBottom","color","getModalStyle","top","left","transform","UserCard","modalStyle","open","setOpen","user","filteredActivityPeriods","activity_periods","Object","keys","filter","item","activityPeriodsObj","reduce","acc","key","getFilteredActivityPeriodDateAsKey","start_time","push","startTime","endTime","end_time","getActivityPeriodsObj","Card","onClick","CardContent","gutterBottom","real_name","Modal","onClose","aria-labelledby","aria-describedby","style","newDate","toDateString","getDateString","map","List","modal","ListItem","ListItemText","primary","LandingPage","members","data","member","Component","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.330d6648.chunk.js","sourcesContent":["export const styles = {\n    cardContainer: {\n        margin: 10,\n    }\n};","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n}));\n\nexport default function ButtonAppBar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" component=\"h6\">\n            Activity Tracker\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import 'date-fns';\nimport React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport DateFnsUtils from '@date-io/date-fns';\nimport {\n    MuiPickersUtilsProvider,\n    KeyboardDatePicker,\n} from '@material-ui/pickers';\n\nexport default function TimePicker(props) {\n    const [selectedDate, setSelectedDate] = React.useState(new Date());\n\n    const handleDateChange = (date) => {\n        setSelectedDate(date);\n        props.selectedDate(date)\n    };\n\n    return (\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <Grid container justify=\"space-around\">\n                <KeyboardDatePicker\n                    margin=\"normal\"\n                    id=\"date-picker-dialog\"\n                    label=\"Please select the date\"\n                    format=\"MM/dd/yyyy\"\n                    value={selectedDate}\n                    onChange={handleDateChange}\n                    KeyboardButtonProps={{\n                        'aria-label': 'change date',\n                    }}\n                />\n            </Grid>\n        </MuiPickersUtilsProvider>\n    );\n}","export const spiltEmptySpace = (splitable) => splitable.split(\" \");\nexport const joinWithEmptyAndTrim = (joinable) => joinable.join(\" \").trim();\nexport const lastElmIndex = (arr) => arr.length - 1;\n\nexport function getDateString(newDate) {\n    const temp = spiltEmptySpace(new Date(newDate).toDateString());\n    const date = joinWithEmptyAndTrim(temp.slice(1));\n    return date;\n}\n\nexport const getDateTimeObj = (dateTimeString) => {\n    const temp = spiltEmptySpace(dateTimeString);\n    const date = joinWithEmptyAndTrim(temp.slice(0, lastElmIndex(temp)));\n    const time = temp[lastElmIndex(temp)].trim();\n\n    return {\n        date,\n        time,\n    };\n};\n\nexport function getActivityPeriodsObj(user) {\n    return user.activity_periods.reduce((acc, item) => {\n        const key = getDateTimeObj(item.start_time).date;\n        if (!acc[key]) {\n            acc[key] = [];\n        }\n        acc[key].push({\n            startTime: getDateTimeObj(item.start_time).time,\n            endTime: getDateTimeObj(item.end_time).time,\n        });\n        return acc;\n    }, {});\n}\n\nexport function getFilteredActivityPeriodDateAsKey(activity_periods, selectedDate) {\n    const filteredActivityPeriods = Object.keys(activity_periods).filter(\n        (item) => item === selectedDate\n    );\n\n    const activityPeriodsObj = filteredActivityPeriods.reduce((acc, key) => {\n        acc[key] = activity_periods[key];\n        return acc;\n    }, {});\n    return filteredActivityPeriods.length === 0 && !selectedDate\n        ? activity_periods\n        : activityPeriodsObj;\n}","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Modal from \"@material-ui/core/Modal\";\nimport TimePicker from \"../TimePicker\";\nimport { List, ListItem, ListItemText } from \"@material-ui/core\";\nimport { getActivityPeriodsObj, getFilteredActivityPeriodDateAsKey, getDateString } from '../../utils';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    marginTop: 10,\n    marginLeft: \"20%\",\n    marginRight: \"20%\",\n  },\n  title: {\n    fontSize: 14,\n  },\n  paper: {\n    position: \"absolute\",\n    width: \"80%\",\n    height: \"80%\",\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(1),\n    border: \"2px solid \" + theme.palette.background.paper,\n    overflow: \"scroll\",\n    ['@media (min-width:1025px)']: {\n      width: \"40%\",\n    }\n  },\n  activityTitle: {\n    marginTop: 20,\n    marginBottom: 10,\n    fontSize: 18,\n    color: \"#3c3c3c\",\n  },\n  container: {\n    marginTop: 10,\n  },\n}));\n\n\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nexport default function UserCard(props) {\n  const classes = useStyles();\n  const [modalStyle] = React.useState(getModalStyle);\n  const [open, setOpen] = React.useState(false);\n  const [selectedDate, setSelectedDate] = React.useState(\"\");\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n    setSelectedDate(\"\");\n  };\n\n  const onSelectedDate = (newDate) => {\n    setSelectedDate(getDateString(newDate));\n  };\n\n  const { user } = props;\n  const activity_periods = getActivityPeriodsObj(user);\n  const filteredActivityPeriods = getFilteredActivityPeriodDateAsKey(\n    activity_periods,\n    selectedDate\n  );\n  return (\n    <div className={classes.container}>\n      <div key={user.id}>\n        <Card className={classes.root} onClick={handleOpen}>\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              {user.real_name}\n            </Typography>\n          </CardContent>\n        </Card>\n        <Modal\n          open={open}\n          onClose={handleClose}\n          aria-labelledby=\"simple-modal-title\"\n          aria-describedby=\"simple-modal-description\"\n        >\n          <div style={modalStyle} className={classes.paper}>\n            <Typography id=\"simple-modal-title\" variant=\"h6\">\n              User Activity Details\n              </Typography>\n            <TimePicker selectedDate={onSelectedDate} />\n            {Object.keys(filteredActivityPeriods).length ? (\n              Object.keys(filteredActivityPeriods).map((key) => {\n                return (\n                  <List className={classes.modal} key={key}>\n                    <Typography variant=\"subtitle2\">\n                      User was active on {key} at:\n                      </Typography>\n                    {filteredActivityPeriods[key].map((item) => {\n                      return (\n                        <ListItem key={item.startTime + item.endTime}>\n                          <ListItemText\n                            id=\"simple-modal-description\"\n                            primary={`${item.startTime} - ${item.endTime}`}\n                          />\n                        </ListItem>\n                      );\n                    })}\n                  </List>\n                );\n              })\n            ) : (\n                <Typography variant=\"caption\">No Activity Period found.</Typography>\n              )}\n          </div>\n        </Modal>\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport { styles } from './style';\nimport Header from '../Header';\nimport UserCard from '../UserCard';\nimport data from '../../API/Test.json';\n\nclass LandingPage extends Component {\n    render() {\n        const { members } = data;\n        return (\n            <div>\n                <Header />\n                <div style={styles.cardContainer}>\n                    {members.map((member) => <UserCard user={member} key={member.id} />)}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default LandingPage;","import React from 'react';\nimport LandingPage from './components/landingPage';\n\nfunction App() {\n  return (\n    <LandingPage />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}